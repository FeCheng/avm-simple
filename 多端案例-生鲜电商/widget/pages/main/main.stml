<template>
  <view class="main">
    <view class="header-part">
        <safe-area></safe-area>
        <view class="header-nav">
            <view class="header-left" onclick="fnOpenCitySelectorFrame();">
                <image class={this.data.citySelectorOpened?'header-left-arrow header-left-arrow-active':'header-left-arrow'} src="../../image/arrow_down.png"></image>
                <text class="header-left-city" id="city">{this.data.cityName}</text>
            </view>
            <image class="header-icon" src="../../image/home_title.png"></image>
            <view class="header-right" onclick="fnOpenPersonalCenterWin();">
                <image class="header-right-icon" src="../../image/home_membercenter.png"></image>
            </view>
        </view>
        <scroll-view class="nav" scroll-x='true' scrollX scrollXBar="false">
            <text class={'nav-menu'+(this.data.currentIndex==index?' nav-menu-selected':'')} v-for="(item,index) in wareTypeList" data-index={index} onclick={this.fnSetNavMenuIndex}>{item.name}</text>
        </scroll-view>
    </view>
    <scroll-view scroll-y='true' scrollY class="warelist" onscrolltolower={this.onscrolltolower}>
        <refresh class="refresh" state={refreshState} onstatechange={this.onstatechange}>
            <image class={refreshIconClass} src="../../image/refresh.png"></image>
            <image class={refreshLoadingClass} src="../../image/loading.gif"></image>
            <text class="refreshStateDesc">{refreshStateDesc}</text>
        </refresh>
        <view class="header">
            <image class="banner" src={this.data.bannerUrl} placeholder="../../image/default_rect.png" thumbnail="false" mode="widthFix">
        </view>
        <view>
            <view class="cell" v-for="(item, index) in dataList">
                <view data-id={item.id} data-wareCount={item.wareCount} class="container" onclick={this.fnOpenDetailWin}>
                    <image class="thumbnail" src={item.thumbnail} placeholder="../../image/default_square.png"></image>
                    <view class="info">
                        <text class="info-name">{item.name + ' ' + (item.unit||'')}</text>
                        <text class="info-description">{item.description}</text>
                        <text class="info-price">{'￥'+item.price}</text>
                        <text class="info-origin-price">{'￥'+item.originPrice}</text>
                    </view>
                    <view class="control">
                        <image class={'minus'+(item.wareCount>0?'':' none')} data-index={index} src="../../image/minus.png" onclick={this.fnMinus}>
                        <text class={'count'+(item.wareCount>0?'':' none')}>{item.wareCount}</text>
                        <image class="add" data-index={index} src="../../image/add.png" onclick={this.fnAdd}>
                    </view>
                </view>
            </view>
        </view>
        <view class="footer">
            <text class="loadDesc">{this.data.haveMoreData?'加载中...':'没有啦！'}</text>
        </view>
    </scroll-view>
    <view class="minicart">
        <minicart></minicart>
    </view>
    <view class="cityselect" v-if="citySelectorOpened">
        <safe-area></safe-area>
        <text class="cityselector-close" onclick={this.closeAction}>×</text>
        <text class="cityselector-title">选择所需服务的地区</text>
        <scroll-view class="cityselector-section">
            <view v-for="(item, index) in cityDataList">
                <text class="cityselector-city" data-item={item} onclick={this.fnSelectCity}>{item.name}</text>
            </view>
        </scroll-view>
    </view>
  </view>
</template>
<script>
import $kn from "../../script/kn.js";
import minicart from '../../components/minicart_frame.stml';
export default{
    name:'main',
    data() {
        return {
            citySelectorOpened: false,
            cityName:'选择地区',
            cityDataList: [],
            wareTypeList:[],
            currentIndex:0,
            frames:[],
            dataList: [],
            bannerUrl: '',
            skip: 0,
            haveMoreData: true,
            refreshState: 'normal',
            wareTypeId: ''
        }
    },
    computed: {
        refreshIconClass(){
            if (this.data.refreshState == 'normal') {
                return 'refreshIcon refreshIcon-normal';
            } else if (this.data.refreshState == 'dragging') {
                return 'refreshIcon refreshIcon-dragging';
            } else if (this.data.refreshState == 'refreshing') {
                return 'refreshIcon refreshIcon-refreshing';
            }
        },
        refreshLoadingClass() {
            if (this.data.refreshState == 'refreshing') {
                return 'refreshLoading refreshLoading-refreshing';
            } else {
                return 'refreshLoading';
            }
        },
        refreshStateDesc() {
            if (this.data.refreshState == 'normal') {
                return '下拉可以刷新';
            } else if (this.data.refreshState == 'dragging') {
                return '松开可以刷新';
            } else if (this.data.refreshState == 'refreshing') {
                return '刷新中...';
            }
        }
    },
    methods:{
        apiready(){
            this.initEventListenner();

            // 从缓存中获取上一次选择的城市信息
            var currentCity = $kn.getCurrentCityInfo();
            if (!currentCity) {
                this.fnOpenCitySelectorFrame();
                return;
            }
            // 更新界面上显示的城市名称
            this.data.cityName = currentCity.name;
            // 从服务器端更新商品分类列表
            this.fnGetWareTypeList();
        },
        updatedWareList(){
            if (this.data.wareTypeList.length > 0) {
                var wareType = this.data.wareTypeList[this.data.currentIndex];
                this.data.bannerUrl = wareType.banner;
                this.data.wareTypeId = wareType.id;
                this.data.refreshState = 'refreshing';
                this.fnGetWareList(false);
            }
        },
        // 从服务器端更新商品分类列表
        fnGetWareTypeList() {
            var that = this;
            $kn.ajax({
                url: 'wareTypes/getWareTypeList',
                cache: true
            }, function(ret, err) {
                if (ret && ret.data) {
                    that.data.wareTypeList = ret.data;
                    that.updatedWareList();
                } else {
                    api.toast({
                        msg: '获取商品分类失败',
                        duration: 2000,
                        location: 'bottom'
                    });
                }
            });
        },

        updateShoppingCart(param){
            var that = this;
            var wareId = param.wareId;
            var wareCount = param.wareCount;
            var body = {
                wareId: wareId,
                wareCount: wareCount
            };
            if (param.hasOwnProperty('selected')) {
                body.selected = param.selected;
            }
            $kn.ajax({
                url: 'carts/mod',
                method: 'post',
                data: {
                    body: body
                }
            }, function(ret, err) {
                if (ret && ret.data) {
                    api.setGlobalData({key:'cartInfo' ,value:ret.data});
                    api.sendEvent({
                        name: 'onGetCartInfo',
                        extra: ret.data
                    });
                    if (that.data.dataList && that.data.dataList.length > 0) {
                        that.getFixedWareList(that.data.dataList, ret.data.wareList);
                    }
                }
            });
        },

        // 初始化事件监听
         initEventListenner() {
            var that = this;
            
            // 监听updateShoppingCart事件（自定义），更新购物车信息
            api.addEventListener({
                name: 'updateShoppingCart'
            }, function(ret, err) {
                that.updateShoppingCart(ret.value);
            });

            // 拦截Android的返回键，在首页点击返回键，提示退出应用
            api.addEventListener({
                name: 'keyback'
            }, function(ret, err) {
                api.confirm({
                    title: '提示',
                    msg: '是否退出应用',
                    buttons: ['确定', '取消']
                }, function(ret, err) {
                    if (ret.buttonIndex == 1) {
                        api.closeWidget({
                            silent: true
                        });
                    }
                });
            });
        },

        fnOpenCitySelectorFrame() {
            this.data.citySelectorOpened = !this.data.citySelectorOpened;
            if (this.data.citySelectorOpened) {
                this.fnGetCityList();
            }
        },

        fnSetNavMenuIndex(e) {
            var index = e.currentTarget.dataset.index;
            if (this.data.currentIndex != index) {
                this.data.currentIndex = index;
                this.updatedWareList();
            }
        },

        fnOpenPersonalCenterWin() {
            var userInfo = $kn.getUserInfo();
            if (userInfo && userInfo.id) {
                api.openWin({
                    name: 'personalcenter',
                    url: '../personalcenter/personalcenter.stml'
                });
            } else {
                // 没有登录，打开登录Window
                api.openWin({
                    name: 'login',
                    url: '../login/login.stml'
                });
            }
        },
        onstatechange(e) {
            var state = e.detail.state;
            if (state == 'normal') {
                this.data.refreshState = 'normal';
            } else if (state == 'dragging') {
                this.data.refreshState = 'dragging';
            } else if (state == 'refreshing') {
                this.data.refreshState = 'refreshing';
                this.fnGetWareList(false);
            }
        },
        // 获取商品列表，通过loadMore_参数区分是首次加载还是加载更多
        fnGetWareList(loadMore_) {
            // 如果是加载更多，需要实现分页
            var limit = 10;
            if (loadMore_) {
                this.data.skip += limit;
            } else {
                this.data.skip = 0;
            }

            var currentCity = $kn.getCurrentCityInfo();
            var that = this;
            // 根据城市和商品分类获得相应的商品列表
            $kn.ajax({
                url: 'wares/getWareList',
                method: 'post',
                data: {
                    body: {
                        supportAreaId: currentCity?currentCity.id:'',
                        wareTypeId: this.data.wareTypeId,
                        skip: this.data.skip,
                        limit: limit
                    }
                }
            }, function(ret, err) {
                if (ret && ret.data) {
                    var cartData = api.getGlobalData({key: 'cartInfo'});
                    var data = ret.data;
                    that.data.haveMoreData = data.length == limit;
                    that.getFixedWareList(data, cartData?cartData.wareList:null);
                    if (loadMore_) {
                        that.data.dataList = that.data.dataList.concat(data);
                    } else {
                        that.data.dataList = data;
                    }
                } else {
                    api.toast({
                        msg: '加载数据失败',
                        duration: 2000,
                        location: 'bottom'
                    });
                }
                that.data.refreshState = 'normal';
            });
        },
        getFixedWareList(wareList, cartWareList) {
            for (var i=0;i<wareList.length;i++) {
                var item = wareList[i];
                item.wareCount = 0;
                if (cartWareList && cartWareList.length > 0) {
                    for (var j=0;j<cartWareList.length;j++) {
                        var cartItem = cartWareList[j];
                        if (cartItem.id == item.id) {
                            item.wareCount = cartItem.wareCount;
                        }
                    }
                }
            }
        },
        onscrolltolower() {
            if (this.data.haveMoreData) {
                this.fnGetWareList(true);
            }
        },
        fnOpenDetailWin(e) {
            var id = e.currentTarget.dataset.id;
            var wareCount = e.currentTarget.dataset.wareCount;
            
            api.openWin({
                name: 'ware'+id,
                url: '../ware/ware.stml',
                pageParam: {
                    wareId: id,
                    wareCount: wareCount
                },
                animation: {
                    type: "fade"
                }
            });
        },
        fnMinus(e) {
            e.stopPropagation && e.stopPropagation();
            if (!$kn.getUserInfo()) {
                api.openWin({
                    name: 'login',
                    url: '../login/login.stml'
                });
                return;
            }
            var index = e.currentTarget.dataset.index;
            var item = this.data.dataList[index];
            if (item.wareCount > 0) {
                item.wareCount--;
                
                this.updateShoppingCart({
                    wareId: item.id,
                    wareCount: item.wareCount
                });
            }
        },
        fnAdd(e) {
            e.stopPropagation && e.stopPropagation();
            if (!$kn.getUserInfo()) {
                api.openWin({
                    name: 'login',
                    url: '../login/login.stml'
                });
                return;
            }
            var index = e.currentTarget.dataset.index;
            var item = this.data.dataList[index];
            item.wareCount++;
                
            this.updateShoppingCart({
                wareId: item.id,
                wareCount: item.wareCount
            });
        },  
        closeAction() {
            this.closeFrame();
        },
        closeFrame(currentCity) {
            var that = this;
            // 更新箭头状态
            that.data.citySelectorOpened = false;
            if (currentCity) {
                // 更新城市名称
                if (that.data.cityName != currentCity.name) {
                    that.data.cityName = currentCity.name;

                    if (that.data.wareTypeList.length > 0) {
                        that.updatedWareList();
                    } else {
                        that.fnGetWareTypeList();
                    }
                }
            }
        },
        fnGetCityList() {
            var that = this;
            $kn.ajax({
                url: 'supportAreas/getSupportAreaList',
                cache: true
            }, function(ret, err) {
                if (ret && ret.data) {
                    var data = ret.data;
                    var list = [];
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].name) {
                            list.push(data[i]);
                        }
                    }
                    that.data.cityDataList = list;
                } else {
                    api.toast({
                        msg: '获取区域列表失败'
                    });
                }
            });
        },
        fnSelectCity(e) {
            var cityInfo = e.currentTarget.dataset.item;
            $kn.setCurrentCityInfo(cityInfo);
            this.closeFrame(cityInfo);
        }
    }
}
</script>
<style>
    .main {
        height: 100%;
    }

    .header-part {
        background-color: #e1017e;
    }

    .header-nav {
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 50px;
    }

    .header-left {
        flex-direction: row;
        align-items: center;
        position: absolute;
        left: 10px;
        width: 100px;
        height: 100%;
    }

    .header-left:active {
        opacity: 0.8;
    }

    .header-left-arrow {
        width: 13px;
        height: 8px;
        transition-property: transform;
        transition-duration: 200ms;
        transform: rotate(0);
    }

    .header-left-arrow-active {
        transform: rotate(180deg);
    }

    .header-left-city {
        font-size: 14px;
        color: #fff;
    }

    .header-icon {
        width: 74px;
        height: 19px;
    }

    .header-right {
        justify-content: center;
        align-items: center;
        position: absolute;
        bottom: 0;
        right: 0;
        width: 40px;
        height: 100%;
    }

    .header-right:active {
        opacity: 0.8;
    }

    .header-right-icon {
        width: 30px;
        height: 30px;
    }

    .nav {
		width: 100%;
        height: 40px;
		white-space: nowrap;
    }

    .nav-menu {
		display: inline-block;
        margin: 0 20px;
        height: 40px;
        line-height: 40px;
        font-size: 13px;
        color: #f973b8;
    }

    .nav-menu-selected {
        color: #fff;
        font-weight: bolder;
    }

    .warelist {
        width: 100%;
        flex: 1;
        overflow-y: scroll;
    }

    .refresh {
        align-items: center;
        justify-content: center;
    }
    .refreshStateDesc {
        color: #e3007f;
        font-size: 13px;
    }
    .refreshIcon {
        position: absolute;
        width: 25px;
        height: 22px;
        left: 70px;
        top: 50%;
        margin-top: -11px;        
        transition-property: transform;
        transition-duration: 100ms;
    }
    .refreshIcon-normal {
        transform: rotate(0);
        visibility: visible;
    }
    .refreshIcon-dragging {
        transform: rotate(180deg);
        visibility: visible;
    }
    .refreshIcon-refreshing {
        visibility: hidden;
    }
    .refreshLoading {
        position: absolute;
        width: 22px;
        height: 22px;
        top: 50%;
        margin-top: -11px;        
        left: 70px;
        visibility: hidden;
    }
    .refreshLoading-refreshing {
        visibility: visible;
    }

    .header {
        width: 100%;
        padding: 4px 8px;
        box-sizing: border-box;
        background-color: white;
    }
    
    .banner {
        width: 100%;
    }

    .cell {
        height: 130px;
        padding: 0 8px;
    }

    .container {
        flex-direction: row;
        align-items: center;
        width: 100%;
        height: 100%;
        border-bottom: 0.5px solid #d1d1d1;
    }

    .container:active {
        background-color: #f8f8f8;
    }
    
    .thumbnail {
        width: 100px;
        height: 100px;
    }
    
    .info {
        flex: 1;
        height: 100px;
        padding-left: 8px;
        justify-content: center;
    }
    
    .info-name {
        font-size: 16px;
        color: #000;
        font-weight: 500;
    }

    .info-description {
        font-size: 14px;
        color: gray;
    }
    
    .info-price {
        font-size: 14px;
        color: #e3007f;
    }
    
    .info-origin-price {
        font-size: 11px;
        color: #c0c0c0;
        text-decoration: line-through;
    }

    .control {
        flex-direction: row;
        position: absolute;
        right: 0;
        bottom: 20px;
    }
    
    .minus, .add {
        display: flex;
        width: 25px;
        height: 25px;
    }

    .minus:active {
        opacity: 0.7;
    }

    .add:active {
        opacity: 0.7;
    }

    .none {
        display: none;
    }
    
    .count {
        display: flex;
        width: 40px;
        height: 24px;
        line-height: 24px;
        margin: 0 5px;
        color: #444;
        font-size: 14px;
        text-align: center;
        border-radius: 12px;
        border: 1px solid #ddd;
        background-color: #fff;
    }
    
    .footer {
        height: 44px;
        justify-content: center;
        align-items: center;
    }

    .loadDesc {
        width: 200px;
        text-align: center;
    }

    .minicart {
        position: absolute;
        bottom: 110px;
    }
    .cityselect {
        position: absolute;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
    }
    .cityselector-main {
        height: 100%;
    }
    .cityselector-close {
        width: 50px;
        height: 35px;
        font-size: 35px;
        color: #fff;
        text-align: center;
    }
    .cityselector-title {
        align-self: center;
        width: 80%;
        padding: 10px;
        border-bottom: 2px solid #c8026f;
        color: #fff;
        font-size: 14px;
        text-align: center;
    }
    .cityselector-section {
        width: 100%;
        flex: 1;
        overflow-y: scroll;
    }
    .cityselector-city {
        width: 100%;
        height: 55px;
        line-height: 55px;
        text-align: center;
        font-size: 22px;
        color: #fff;
    }
</style>
